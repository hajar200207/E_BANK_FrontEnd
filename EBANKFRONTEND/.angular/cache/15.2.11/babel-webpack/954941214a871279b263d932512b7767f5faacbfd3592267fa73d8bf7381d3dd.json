{"ast":null,"code":"import { tap } from 'rxjs';\nimport jwtDecode from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.tokenKey = 'authToken'; // Key for storing the token\n    this.apiUrl = 'http://localhost:8087/api/users'; // Your API URL\n  }\n\n  isLoggedIn() {\n    const token = localStorage.getItem(this.tokenKey);\n    if (token) {\n      try {\n        const decodedToken = jwtDecode(token);\n        const currentTime = Math.floor(Date.now() / 1000); // Current time in seconds\n        return decodedToken.exp > currentTime; // Check if token is expired\n      } catch (e) {\n        return false; // Token decoding failed, treat as not logged in\n      }\n    }\n\n    return false; // No token found\n  }\n\n  logout() {\n    localStorage.removeItem(this.tokenKey); // Remove the token from local storage\n  }\n\n  login(username, password) {\n    return this.http.post(this.apiUrl + '/login', {\n      username,\n      password\n    }).pipe(tap(response => {\n      if (response && response.token) {\n        localStorage.setItem(this.tokenKey, response.token); // Store the token in local storage\n      }\n    }));\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAEA,SAAoBA,GAAG,QAAO,MAAM;AACpC,OAAOC,SAAS,MAAM,YAAY;;;AAMlC,OAAM,MAAOC,WAAW;EAIpBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHhB,aAAQ,GAAG,WAAW,CAAC,CAAC;IACxB,WAAM,GAAG,iCAAiC,CAAC,CAAC;EAEb;;EAEvCC,UAAU;IACN,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACC,QAAQ,CAAC;IACjD,IAAIH,KAAK,EAAE;MACP,IAAI;QACA,MAAMI,YAAY,GAAQT,SAAS,CAACK,KAAK,CAAC;QAC1C,MAAMK,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;QACnD,OAAOL,YAAY,CAACM,GAAG,GAAGL,WAAW,CAAC,CAAC;OAC1C,CAAC,OAAOM,CAAC,EAAE;QACR,OAAO,KAAK,CAAC,CAAC;;;;IAGtB,OAAO,KAAK,CAAC,CAAC;EAClB;;EAEAC,MAAM;IACFX,YAAY,CAACY,UAAU,CAAC,IAAI,CAACV,QAAQ,CAAC,CAAC,CAAC;EAC5C;;EAEAW,KAAK,CAACC,QAAgB,EAAEC,QAAgB;IACpC,OAAO,IAAI,CAAClB,IAAI,CAACmB,IAAI,CAAM,IAAI,CAACC,MAAM,GAAG,QAAQ,EAAE;MAAEH,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CACrEG,IAAI,CACDzB,GAAG,CAAC0B,QAAQ,IAAG;MACX,IAAIA,QAAQ,IAAIA,QAAQ,CAACpB,KAAK,EAAE;QAC5BC,YAAY,CAACoB,OAAO,CAAC,IAAI,CAAClB,QAAQ,EAAEiB,QAAQ,CAACpB,KAAK,CAAC,CAAC,CAAC;;IAE7D,CAAC,CAAC,CACL;EACT;EAAC;qBAjCQJ,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAA0B,SAAX1B,WAAW;IAAA2B,YAFR;EAAM","names":["tap","jwtDecode","AuthService","constructor","http","isLoggedIn","token","localStorage","getItem","tokenKey","decodedToken","currentTime","Math","floor","Date","now","exp","e","logout","removeItem","login","username","password","post","apiUrl","pipe","response","setItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\user\\Desktop\\E_BANK_FrontEnd\\EBANKFRONTEND\\src\\app\\Services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport {Observable, tap} from 'rxjs';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n    private tokenKey = 'authToken'; // Key for storing the token\r\n    private apiUrl = 'http://localhost:8087/api/users'; // Your API URL\r\n\r\n    constructor(private http: HttpClient) {}\r\n\r\n    isLoggedIn(): boolean {\r\n        const token = localStorage.getItem(this.tokenKey);\r\n        if (token) {\r\n            try {\r\n                const decodedToken: any = jwtDecode(token);\r\n                const currentTime = Math.floor(Date.now() / 1000); // Current time in seconds\r\n                return decodedToken.exp > currentTime; // Check if token is expired\r\n            } catch (e) {\r\n                return false; // Token decoding failed, treat as not logged in\r\n            }\r\n        }\r\n        return false; // No token found\r\n    }\r\n\r\n    logout(): void {\r\n        localStorage.removeItem(this.tokenKey); // Remove the token from local storage\r\n    }\r\n\r\n    login(username: string, password: string): Observable<any> {\r\n        return this.http.post<any>(this.apiUrl + '/login', { username, password })\r\n            .pipe(\r\n                tap(response => {\r\n                    if (response && response.token) {\r\n                        localStorage.setItem(this.tokenKey, response.token); // Store the token in local storage\r\n                    }\r\n                })\r\n            );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}