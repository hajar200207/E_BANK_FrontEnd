{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = '/api/users/login';\n  }\n  isLoggedIn() {\n    const token = localStorage.getItem('token');\n    return !!token;\n  }\n  login(username, password) {\n    return this.http.post(this.apiUrl, {\n      username,\n      password\n    }).pipe(tap(response => {\n      localStorage.setItem('token', response.token);\n    }));\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,GAAG,QAAQ,gBAAgB;;;AAMpC,OAAM,MAAOC,WAAW;EAGpBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,kBAAkB;EAEI;EACvCC,UAAU;IAEN,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,CAAC,CAACF,KAAK;EAClB;EACAG,KAAK,CAACC,QAAgB,EAAEC,QAAgB;IACpC,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAM,IAAI,CAACC,MAAM,EAAE;MAAEH,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CAACG,IAAI,CAChEb,GAAG,CAACc,QAAQ,IAAG;MACXR,YAAY,CAACS,OAAO,CAAC,OAAO,EAAED,QAAQ,CAACT,KAAK,CAAC;IACjD,CAAC,CAAC,CACL;EACL;EAAC;qBAfQJ,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAe,SAAXf,WAAW;IAAAgB,YAFR;EAAM","names":["tap","AuthService","constructor","http","isLoggedIn","token","localStorage","getItem","login","username","password","post","apiUrl","pipe","response","setItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\user\\Desktop\\E_BANK_FrontEnd\\EBANKFRONTEND\\src\\app\\Services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n    private apiUrl = '/api/users/login';\r\n\r\n    constructor(private http: HttpClient) {}\r\n    isLoggedIn(): boolean {\r\n\r\n        const token = localStorage.getItem('token');\r\n        return !!token;\r\n    }\r\n    login(username: string, password: string): Observable<any> {\r\n        return this.http.post<any>(this.apiUrl, { username, password }).pipe(\r\n            tap(response => {\r\n                localStorage.setItem('token', response.token);\r\n            })\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}