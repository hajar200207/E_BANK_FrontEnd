{"ast":null,"code":"import { jwtDecode } from 'jwt-decode'; // Named import\nimport { catchError, throwError } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.tokenKey = 'authToken'; // Key for storing the token\n    this.apiUrl = 'http://localhost:8087/api/users'; // Your API URL\n  }\n\n  isLoggedIn() {\n    const token = localStorage.getItem(this.tokenKey);\n    if (token) {\n      try {\n        const decodedToken = jwtDecode(token);\n        const currentTime = Math.floor(Date.now() / 1000); // Current time in seconds\n        return decodedToken.exp > currentTime; // Check if token is expired\n      } catch (e) {\n        return false; // Token decoding failed, treat as not logged in\n      }\n    }\n\n    return false; // No token found\n  }\n\n  logout() {\n    localStorage.removeItem(this.tokenKey); // Remove the token from local storage\n  }\n\n  login(username, password) {\n    return this.http.post('http://localhost:8087/api/users/login', {\n      username,\n      password\n    }).pipe(tap(response => {\n      // Handle successful login, e.g., store token\n      console.log('Login successful:', response);\n    }), catchError(error => {\n      // Handle error, e.g., show error message\n      console.error('Login error:', error);\n      return throwError(error);\n    }));\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,SAAS,QAAQ,YAAY,CAAC,CAAC;AACxC,SAAQC,UAAU,EAAcC,UAAU,QAAO,MAAM;AACvD,SAASC,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,WAAW;EAIpBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHhB,aAAQ,GAAG,WAAW,CAAC,CAAC;IACxB,WAAM,GAAG,iCAAiC,CAAC,CAAC;EAEb;;EAEvCC,UAAU;IACN,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACC,QAAQ,CAAC;IACjD,IAAIH,KAAK,EAAE;MACP,IAAI;QACA,MAAMI,YAAY,GAAQZ,SAAS,CAACQ,KAAK,CAAC;QAC1C,MAAMK,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;QACnD,OAAOL,YAAY,CAACM,GAAG,GAAGL,WAAW,CAAC,CAAC;OAC1C,CAAC,OAAOM,CAAC,EAAE;QACR,OAAO,KAAK,CAAC,CAAC;;;;IAGtB,OAAO,KAAK,CAAC,CAAC;EAClB;;EAEAC,MAAM;IACFX,YAAY,CAACY,UAAU,CAAC,IAAI,CAACV,QAAQ,CAAC,CAAC,CAAC;EAC5C;;EAEAW,KAAK,CAACC,QAAgB,EAAEC,QAAgB;IACpC,OAAO,IAAI,CAAClB,IAAI,CAACmB,IAAI,CAAC,uCAAuC,EAAE;MAAEF,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CACjFE,IAAI,CACDvB,GAAG,CAACwB,QAAQ,IAAG;MACX;MACAC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEF,QAAQ,CAAC;IAC9C,CAAC,CAAC,EACF1B,UAAU,CAAC6B,KAAK,IAAG;MACf;MACAF,OAAO,CAACE,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,OAAO5B,UAAU,CAAC4B,KAAK,CAAC;IAC5B,CAAC,CAAC,CACL;EACT;EAAC;qBArCQ1B,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAA2B,SAAX3B,WAAW;IAAA4B,YAFR;EAAM","names":["jwtDecode","catchError","throwError","tap","AuthService","constructor","http","isLoggedIn","token","localStorage","getItem","tokenKey","decodedToken","currentTime","Math","floor","Date","now","exp","e","logout","removeItem","login","username","password","post","pipe","response","console","log","error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\user\\Desktop\\E_BANK_FrontEnd\\EBANKFRONTEND\\src\\app\\Services\\auth.service.ts"],"sourcesContent":["import {HttpClient, HttpErrorResponse} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { jwtDecode } from 'jwt-decode'; // Named import\r\nimport {catchError, Observable, throwError} from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n    private tokenKey = 'authToken'; // Key for storing the token\r\n    private apiUrl = 'http://localhost:8087/api/users'; // Your API URL\r\n\r\n    constructor(private http: HttpClient) {}\r\n\r\n    isLoggedIn(): boolean {\r\n        const token = localStorage.getItem(this.tokenKey);\r\n        if (token) {\r\n            try {\r\n                const decodedToken: any = jwtDecode(token);\r\n                const currentTime = Math.floor(Date.now() / 1000); // Current time in seconds\r\n                return decodedToken.exp > currentTime; // Check if token is expired\r\n            } catch (e) {\r\n                return false; // Token decoding failed, treat as not logged in\r\n            }\r\n        }\r\n        return false; // No token found\r\n    }\r\n\r\n    logout(): void {\r\n        localStorage.removeItem(this.tokenKey); // Remove the token from local storage\r\n    }\r\n\r\n    login(username: string, password: string): Observable<any> {\r\n        return this.http.post('http://localhost:8087/api/users/login', { username, password })\r\n            .pipe(\r\n                tap(response => {\r\n                    // Handle successful login, e.g., store token\r\n                    console.log('Login successful:', response);\r\n                }),\r\n                catchError(error => {\r\n                    // Handle error, e.g., show error message\r\n                    console.error('Login error:', error);\r\n                    return throwError(error);\r\n                })\r\n            );\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}