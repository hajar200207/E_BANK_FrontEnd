{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.tokenKey = 'authToken';\n    this.apiUrl = 'http://localhost:8087/api/users';\n  }\n  isLoggedIn() {\n    const token = localStorage.getItem(this.tokenKey);\n    return !!token; // Return true if token exists, false otherwise\n  }\n\n  login(credentials, password) {\n    return this.http.post(`${this.apiUrl}/login`, credentials);\n  }\n  logout() {\n    localStorage.removeItem(this.tokenKey);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;AAOA,OAAM,MAAOA,WAAW;EAIpBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHhB,aAAQ,GAAG,WAAW;IACtB,WAAM,GAAG,iCAAiC;EAEX;EACvCC,UAAU;IACN,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACC,QAAQ,CAAC;IACjD,OAAO,CAAC,CAACH,KAAK,CAAC,CAAC;EACpB;;EAEAI,KAAK,CAACC,WAAgB,EAAEC,QAAgB;IACpC,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAC,GAAG,IAAI,CAACC,MAAM,QAAQ,EAAEH,WAAW,CAAC;EAC9D;EACAI,MAAM;IACFR,YAAY,CAACS,UAAU,CAAC,IAAI,CAACP,QAAQ,CAAC;EAC1C;EAAC;qBAfQP,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAe,SAAXf,WAAW;IAAAgB,YAFR;EAAM","names":["AuthService","constructor","http","isLoggedIn","token","localStorage","getItem","tokenKey","login","credentials","password","post","apiUrl","logout","removeItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\user\\Desktop\\E_BANK_FrontEnd\\EBANKFRONTEND\\src\\app\\Services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n    private tokenKey = 'authToken';\r\n    private apiUrl = 'http://localhost:8087/api/users';\r\n\r\n    constructor(private http: HttpClient) {}\r\n    isLoggedIn(): boolean {\r\n        const token = localStorage.getItem(this.tokenKey);\r\n        return !!token; // Return true if token exists, false otherwise\r\n    }\r\n\r\n    login(credentials: any, password: string) {\r\n        return this.http.post(`${this.apiUrl}/login`, credentials);\r\n    }\r\n    logout(): void {\r\n        localStorage.removeItem(this.tokenKey);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}